#!/usr/bin/env sh

log_msg() {
    type="$1"
    shift

    [ "${type}" = "err"  ] && printf "%s\\n" "Error: $@" >&2
    [ "${type}" = "warn" ] && printf "%s\\n" "Warning: $@" >&2

    [ -n "${verbose}" ] || return 0

    [ "${type}" = "info" ] && printf "%s\\n" "Info: $@"
}

ask_yn() {
    message="$1"

    while true; do
        printf "%s" "${message}"
        read -r yn
        case $yn in
            [yY]*) return 0 ;;
            [nN]*) return 1 ;;
            *) return 1 ;;
        esac
    done
}

generate_mac_addr() {
    printf "%s" "$1" | md5sum | \
      sed 's/^\(..\)\(..\)\(..\).*$/00:16:3e:\1:\2:\3/'
}

install_debian_package_and_recommends() {
    prefix="$1"
    shift

    log_msg info "Installing Debian packages $* to prefix ${prefix}"

    # Use policy-rc to prevent daemons from starting
    printf '#!/bin/sh\nexit 101\n' > "${prefix}/usr/sbin/policy-rc.d"
    chmod +x "${prefix}/usr/sbin/policy-rc.d"

    DEBIAN_FRONTEND=noninteractive chroot "${prefix}" /usr/bin/apt-get -y install "$@"

    # Remove the policy-rc.d script
    rm -f "${prefix}/usr/sbin/policy-rc.d"
}


install_debian_package() {
    prefix="$1"
    shift

    install_debian_package_and_recommends "${prefix}" --no-install-recommends --no-install-suggests "$@"
}

# Generate a Debian-/Ubuntu-compliant menu.lst for legacy GRUB
generate_debian_grub_menu_lst ()
{
    prefix="$1"
    DOMU_ISSUE="$2"
    DOMU_KERNEL="$3"
    DOMU_RAMDISK="$4"

    log_msg info "Generating a legacy GRUB menu.lst into prefix ${prefix}"

    # Generate a menu.lst for pygrub
    mkdir -p "${prefix}/boot/grub"
    cat << E_O_MENU > "${prefix}/boot/grub/menu.lst"
default         0
timeout         2

### BEGIN AUTOMAGIC KERNELS LIST
## lines between the AUTOMAGIC KERNELS LIST markers will be modified
## by the debian update-grub script except for the default options below

## DO NOT UNCOMMENT THEM, Just edit them to your needs

## ## Start Default Options ##
## default kernel options
## default kernel options for automagic boot options
## If you want special options for specific kernels use kopt_x_y_z
## where x.y.z is kernel version. Minor versions can be omitted.
## e.g. kopt=root=/dev/hda1 ro
##      kopt_2_6_8=root=/dev/hdc1 ro
##      kopt_2_6_8_2_686=root=/dev/hdc2 ro
# kopt=root=/dev/xvda1 ro elevator=noop

## default grub root device
## e.g. groot=(hd0,0)
# groot=(hd0,0)

## should update-grub create alternative automagic boot options
## e.g. alternative=true
##      alternative=false
# alternative=true

## should update-grub lock alternative automagic boot options
## e.g. lockalternative=true
##      lockalternative=false
# lockalternative=false

## additional options to use with the default boot option, but not with the
## alternatives
## e.g. defoptions=vga=791 resume=/dev/hda5
# defoptions=

## should update-grub lock old automagic boot options
## e.g. lockold=false
##      lockold=true
# lockold=false

## altoption boot targets option
## multiple altoptions lines are allowed
## e.g. altoptions=(extra menu suffix) extra boot options
##      altoptions=(single-user) single
# altoptions=(single-user mode) single

## controls how many kernels should be put into the menu.lst
## only counts the first occurrence of a kernel, not the
## alternative kernel options
## e.g. howmany=all
##      howmany=7
# howmany=all

## should update-grub create memtest86 boot option
## e.g. memtest86=true
##      memtest86=false
# memtest86=false

## should update-grub adjust the value of the default booted system
## can be true or false
# updatedefaultentry=false

## should update-grub add savedefault to the default options
## can be true or false
# savedefault=false

## ## End Default Options ##

### END DEBIAN AUTOMAGIC KERNELS LIST

# Entries statically generated bu xen-tools upon installation. Maybe
# removed manually if the entries above (generated by update-grub)
# seem to work fine.

title           ${DOMU_ISSUE}
root            (hd0,0)
kernel          /boot/${DOMU_KERNEL} root=/dev/xvda1 ro elevator=noop
initrd          /boot/${DOMU_RAMDISK}

title           ${DOMU_ISSUE} (Single-User)
root            (hd0,0)
kernel          /boot/${DOMU_KERNEL} root=/dev/xvda1 ro single elevator=noop
initrd          /boot/${DOMU_RAMDISK}

title           ${DOMU_ISSUE} (Default Kernel)
root            (hd0,0)
kernel          /vmlinuz root=/dev/xvda1 ro elevator=noop
initrd          /initrd.img

title           ${DOMU_ISSUE} (Default Kernel, Single-User)
root            (hd0,0)
kernel          /vmlinuz root=/dev/xvda1 ro single elevator=noop
initrd          /initrd.img

E_O_MENU
}

cleanup() {
    sleep 1
    printf "Cleaning up ...\\n"
    umount -R "${mount_point}"
    rmdir "${mount_point}"
    losetup -d "${loop_dev}"
}
